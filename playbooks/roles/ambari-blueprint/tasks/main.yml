---
- name: Cargar variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../ambari-blueprint/vars

- block:
    - name: Obtener el id VersionDefinition de Ambari (Ambari >= 2.6)
      uri:
        url: "http://{{ ansible_fqdn }}:8080/api/v1/version_definitions?VersionDefinition/release/version={{ (install_hdp|default(false) == true) | ternary(hdp_version,hdf_version) }}"
        method: GET
        force_basic_auth: yes
        user: "{{ ambari_admin_user }}"
        password: "{{ ambari_admin_password }}"
        headers: '{"X-Requested-By":"ambari"}'
        status_code: 200,201,202
        return_content: yes
      register: version_definition

    - name: Fallar si no se pudo obtener una VersionDefinition de Ambari
      fail:
        msg: "No se pudo obtener VersionDefinition de Ambari. La siguiente es la información recibida de Ambari: {{version_definition}}"
      when: (version_definition.content|from_yaml)['items'] | length == 0

    - name: Establecer el id VersionDefinition (Ambari >= 2.6)
      set_fact:
        vdf_id: "{{ (version_definition.content|from_yaml)['items'][0]['VersionDefinition']['id'] }}"
  when: ambari_version is version_compare('2.6', '>=')

- name: Comprobar si ya existe un clúster {{cluster_name}}
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
  register: cluster_check

- name: Fallar si ya existe un clúster {{cluster_name}}
  fail:
    msg: El clúster {{cluster_name}} ya existe
  when: cluster_check.status != 404

- name: Generar el blueprint dinamico del cluster
  set_fact:
    cluster_blueprint: "{{ lookup('template', blueprint_file, convert_data=False) }}"
  when: blueprint_file == 'blueprint_dynamic.j2'

- name: Generar el blueprint estático del cluster
  set_fact:
    cluster_blueprint: "{{ lookup('file', blueprint_file, convert_data=False) }}"
  when: blueprint_file != 'blueprint_dynamic.j2'

- name: Imprimir el blueprint del clúster
  debug:
    var: cluster_blueprint
    verbosity: 1

- name: Generar el template de creación de clúster
  set_fact:
    cluster_template: "{{ lookup('template', cluster_template_file, convert_data=False) }}"

- name: Imprimir el template de creación de clúster
  debug:
    var: cluster_template
    verbosity: 1

- name: Eliminar cualquier blueprint existente llamado {{ blueprint_name }}
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/blueprints/{{ blueprint_name }}"
    method: DELETE
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
    return_content: no
  when: cluster_check.status == 404

- name: Subir el blueprint {{blueprint_name}} al Ambari server
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/blueprints/{{ blueprint_name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: "{{ cluster_blueprint|to_json }} "
    body_format: raw
    status_code: 200,201,202,409
    timeout: 60
    return_content: no

- name: Lanzar la solicitud de creación de clúster
  uri:
    url: http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: "{{ cluster_template|to_json }} "
    body_format: raw
    status_code: 200,201,202
    timeout: 120
    return_content: yes
  register: cluster_create_task

- name: Esperar a que se cree el clúster
  uri:
    url: "{{ (cluster_create_task.content|from_json).href }}"
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
  register: cluster_check_task
  until: (((cluster_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task.content|from_json).Requests.completed_task_count|int > 0) or
         (cluster_check_task.content|from_json).Requests.request_status == 'FAILED' or
         (cluster_check_task.content|from_json).Requests.request_status == 'TIMEDOUT' or
         (cluster_check_task.content|from_json).Requests.request_status == 'ABORTED')
  retries: "{{ wait_timeout // 10 }}"
  delay: 10
  when: wait and cluster_create_task is defined and cluster_create_task

- name: Fallar si la tarea de creación de clúster está en un estado de error
  fail:
    msg: "No se pudo construir el clúster {{cluster_name}}. El estado de la tarea es {{ (cluster_check_task.content|from_json).Requests.request_status }}."
  when: wait and ((cluster_check_task.content|from_json).Requests.request_status == 'FAILED' or
         (cluster_check_task.content|from_json).Requests.request_status == 'TIMEDOUT' or
         (cluster_check_task.content|from_json).Requests.request_status == 'ABORTED')
